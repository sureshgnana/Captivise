"""
Django settings for captivise project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import sys

from celery.schedules import crontab
from crontab import CronTab
from decimal import *

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'gv!z3yiv-@fbans9(+g71cmht%vxovhz*o++w7l%(_+oylhn7j'

ALLOWED_HOSTS = ['app.captivise','178.238.139.175', '.captivise.com','127.0.0.1','*']
CORS_ORIGIN_ALLOW_ALL = True
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'


# Application definition

INSTALLED_APPS = [
    # Register custom user early
    'accounts',
    'djcelery',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.forms',
    'constance',
    'constance.backends.database',
    'corsheaders',
    'compressor',
    'django_tables2',
    'ecom6',
   
    'adwords',
    'billing',
    'campaign_modifiers',
    'quotes',
    'reports',
    'website',
    'report_scripts',
    'django_filters',
    'bootstrap4',
    'shopping',
    "anymail",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'website.context_processors.banners.hidden_banners',
                'website.context_processors.basework.cms_content_work',  #30/11/2020
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# Authentication

AUTH_USER_MODEL = 'accounts.User'

LOGIN_URL = 'accounts_login'


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'Europe/London'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

#STATICFILES_DIRS = (
 #   os.path.join(BASE_DIR, 'static'),
#)

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')


# Logging
# https://docs.djangoproject.com/en/1.10/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
        # SYPO FILE LOGGER
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': '/var/www/appcaptivise/debug.log',
        },
    },
    'loggers': {
        #'django.request': {
        #    'handlers': ['mail_admins'],
        #    'level': 'ERROR',
        #    'propagate': True,
        #},
        #'celery': {
        #    'handlers': ['mail_admins'],
        #    'level': 'ERROR',
        #    'propagate': True,
        #},
        # SYPO REPLACEMENT LOGGERS
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'celery': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}


# Form rendering
# https://docs.djangoproject.com/en/1.11/_modules/django/forms/renderers/#TemplatesSetting
# https://docs.djangoproject.com/en/1.11/ref/forms/renderers/#django.forms.renderers.TemplatesSetting  # noqa
FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'


# celery
# http://docs.celeryproject.org/en/latest/configuration.html

import djcelery
djcelery.setup_loader()

BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERYBEAT_SCHEDULER =  'djcelery.schedulers.DatabaseScheduler'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ALWAYS_EAGER = True
# http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html
CELERYBEAT_SCHEDULE = {    
    
    'report_scripts.run_scripts': {
        'task': 'report_scripts.run_scripts',
        'schedule': crontab(hour=1, minute=0),
    },
    'accounts.charge_users': {
        'task': 'accounts.charge_users',
        'schedule': crontab(hour=7, minute=0),
    },
    'accounts.check_card_expiries': {
        'task': 'accounts.check_card_expiries',
        'schedule': crontab(hour=7, minute=10),
    },
    'reports.tasks.update_file': {
        'task': 'reports.tasks.update_file',
        'schedule': crontab(hour=0, minute=5),
    }
}


# Locale for CurrencyColumn
import locale  # noqa


locale.setlocale(locale.LC_ALL, 'en_GB.utf8')


# django-compressor
COMPRESS_ROOT = STATIC_ROOT

COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',
]

COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',
]

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)


# JSON field settings
JSONFIELD_ENCODER_CLASS = 'website.utils.JSONDecimalEncoder'


# Payment settings
ECOM6_PAYMENT_MODEL = ('billing', 'Payment')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

CONSTANCE_CONFIG = {
    'DEFAULT_PERCENT': (Decimal(1.00), 'Default Percent', Decimal),
    'NEW_USER_ALERT_EMAIL': ('info@captivise.com', 'New User Alert Email', str),
    'KEYWORD_QUALIFYING_CLICKS': (10, 'Keyword Qualifying Clicks', int),
    'WEB_URL': ('', 'Web URL', str),
    'ZERO_SPEND_ALERT_DAYS': (1, 'Zero Spend Alert in Days', int),
    'ALLOW_GOOGLE_MERCHANT_INTEGRATION': (False, 'Allow Google Merchant Integration', bool),
    'STRIPE_PAYMENT_SANDBOX': (False, 'Enable Stripe Payment Sandbox', bool),
    'CURRENCY_CODE': ('GBP', 'Currency Code', str),   
}

DJANGO_TABLES2_PAGE_RANGE = 5
