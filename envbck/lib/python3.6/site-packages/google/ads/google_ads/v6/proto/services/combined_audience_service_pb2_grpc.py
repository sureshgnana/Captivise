# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.ads.google_ads.v6.proto.resources import combined_audience_pb2 as google_dot_ads_dot_googleads_dot_v6_dot_resources_dot_combined__audience__pb2
from google.ads.google_ads.v6.proto.services import combined_audience_service_pb2 as google_dot_ads_dot_googleads_dot_v6_dot_services_dot_combined__audience__service__pb2


class CombinedAudienceServiceStub(object):
    """Proto file describing the Combined Audience service.

    Service to manage combined audiences. This service can be used to list all
    your combined audiences with metadata, but won't show the structure and
    components of the combined audience.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCombinedAudience = channel.unary_unary(
                '/google.ads.googleads.v6.services.CombinedAudienceService/GetCombinedAudience',
                request_serializer=google_dot_ads_dot_googleads_dot_v6_dot_services_dot_combined__audience__service__pb2.GetCombinedAudienceRequest.SerializeToString,
                response_deserializer=google_dot_ads_dot_googleads_dot_v6_dot_resources_dot_combined__audience__pb2.CombinedAudience.FromString,
                )


class CombinedAudienceServiceServicer(object):
    """Proto file describing the Combined Audience service.

    Service to manage combined audiences. This service can be used to list all
    your combined audiences with metadata, but won't show the structure and
    components of the combined audience.
    """

    def GetCombinedAudience(self, request, context):
        """Returns the requested combined audience in full detail.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CombinedAudienceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCombinedAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCombinedAudience,
                    request_deserializer=google_dot_ads_dot_googleads_dot_v6_dot_services_dot_combined__audience__service__pb2.GetCombinedAudienceRequest.FromString,
                    response_serializer=google_dot_ads_dot_googleads_dot_v6_dot_resources_dot_combined__audience__pb2.CombinedAudience.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'google.ads.googleads.v6.services.CombinedAudienceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CombinedAudienceService(object):
    """Proto file describing the Combined Audience service.

    Service to manage combined audiences. This service can be used to list all
    your combined audiences with metadata, but won't show the structure and
    components of the combined audience.
    """

    @staticmethod
    def GetCombinedAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/google.ads.googleads.v6.services.CombinedAudienceService/GetCombinedAudience',
            google_dot_ads_dot_googleads_dot_v6_dot_services_dot_combined__audience__service__pb2.GetCombinedAudienceRequest.SerializeToString,
            google_dot_ads_dot_googleads_dot_v6_dot_resources_dot_combined__audience__pb2.CombinedAudience.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
